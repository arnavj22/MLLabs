{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyN5Ui7Z4Dyr5eYwu1JHFF04"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"ja8UGS9aM8vO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1667760567120,"user_tz":300,"elapsed":25412,"user":{"displayName":"Arnav Jain","userId":"00519927444891895629"}},"outputId":"b1396b62-03f6-46f5-d63b-b2a9f56ace70"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["import pandas as pd\n","import numpy as np\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["iris_path = \"/content/drive/MyDrive/ML/Lab 7/iris.csv\"\n","df = pd.read_csv(iris_path)"],"metadata":{"id":"Awl-xyz0RVpj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def discretize(df):\n","  for i in list(df):\n","    if i != \"variety\":\n","      col = df[i]\n","      print(i)\n","      bins = pd.cut(col, 3, labels = [\"1\", \"2\", \"3\"]) # Discretizes to bins\n","      df[i] = bins"],"metadata":{"id":"nBHSnbnDR5KV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["discretize(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bhpmDjSLuuU-","executionInfo":{"status":"ok","timestamp":1667771154526,"user_tz":300,"elapsed":4,"user":{"displayName":"Arnav Jain","userId":"00519927444891895629"}},"outputId":"7ea94930-036e-410f-f969-038745fff5ef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["sepal.length\n","sepal.width\n","petal.length\n","petal.width\n"]}]},{"cell_type":"code","source":["y = df['variety']\n","X = df.drop(['variety'], axis = 1)"],"metadata":{"id":"E4Di8UqpR19U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"],"metadata":{"id":"MinEzx1jZSyQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def initialize_prior(y_train):\n","  py = []\n","  for i, j in enumerate(y_train.value_counts()):\n","    py.append(j / len(y_train))\n","  return py"],"metadata":{"id":"fBP9o0JbGon_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def generate_likelyhood_table(X_train, y_train):\n","  table = []\n","  for i in list(X_train):\n","    col = X_train[i]\n","    arr2 = []\n","    for j in list(y_train.unique()):\n","      rows = y_train.loc[y_train == j]\n","      arr = []\n","      for k in [\"1\", \"2\", \"3\"]:\n","        crows = rows.loc[col == k]\n","        arr.append(len(crows)/len(rows))\n","      arr2.append(arr)\n","    for k in [\"1\", \"2\", \"3\"]:\n","      arr = []\n","      for m in col.value_counts():\n","          arr.append(m / len(y_train))\n","    arr2.append(arr)\n","    table.append(arr2)\n","  return table"],"metadata":{"id":"3WpFScfOG7XG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def fit(X_train, y_train):\n","  py = initialize_prior(y_train)\n","  table = generate_likelyhood_table(X_train, y_train)\n","  return py, table\n","def predict(py, table, X_test, classes):\n","\n","  preds = []\n","  for i, i1 in X_test.iterrows(): # enumerate through every instance\n","    prob_list = []\n","    for j, j1 in enumerate(y_train.unique()): # enumerate through every class\n","      prob = 1\n","      for k, k1 in enumerate(list(i1)): #enumerate thorugh every attribute\n","        prob *= table[k][j][int(k1) - 1]\n","        prob /= table[k][-1][int(k1) - 1]\n","      prob *= py[j]\n","      prob_list.append(prob)\n","    pred = np.argmax(np.array(prob_list))\n","    preds.append(classes[pred])\n","  return preds\n"],"metadata":{"id":"2FhlavhdGVzr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["py, table = fit(X_train, y_train)\n","preds = predict(py, table, X_test, classes = list(y_train.unique()))"],"metadata":{"id":"UsjoJWiWGFJ2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["gts = list(y_test)"],"metadata":{"id":"3QHko0riPRfa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["corr, tot = 0, len(y_test)\n","for i, j in zip(gts, preds):\n","  if i == j:\n","    corr += 1\n","print(\"Testing Accuracy:\", corr / tot)\n","print(\"\\nConfusion Matrix:\\n\", pd.crosstab(pd.Series(gts, name = \"Actual\"), pd.Series(preds, name = \"Predicted\")))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tJr-F43oNvfl","executionInfo":{"status":"ok","timestamp":1667776597991,"user_tz":300,"elapsed":297,"user":{"displayName":"Arnav Jain","userId":"00519927444891895629"}},"outputId":"20747585-7bb0-4f1c-fce4-410665108e56"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Testing Accuracy: 0.9666666666666667\n","\n","Confusion Matrix:\n"," Predicted   Setosa  Versicolor  Virginica\n","Actual                                   \n","Setosa          11           0          0\n","Versicolor       0          13          0\n","Virginica        0           1          5\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"SB6J41Y8RjeY"},"execution_count":null,"outputs":[]}]}